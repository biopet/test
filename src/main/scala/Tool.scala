import java.io._

import scala.collection.JavaConverters._
import scala.collection.mutable.ListBuffer
object Tool {
  def main(args: Array[String]): Unit = {
    val docsDir: String = args(0)
    Documentation.generatePages(docsDir)
  }

  def generatePages(docsDir: String): Unit = {
    val directory = new File(docsDir)
    directory.mkdir()
    Documentation.generatePages(docsDir)
  }

  class DocPage(fileName: String,
                 text: String

                ) {
    def showFilename: String = fileName
    def generateTextFile(): Unit = {
      val printWriter = new PrintWriter(new File(fileName))
      printWriter.write(text)
      printWriter.close()
      }
    }

  object Documentation {

    def generatePages(docsDir: String): Unit = {
      val title = "Bla manual"
      val readme: DocPage = {
        new DocPage(docsDir + "index.md",
          """
            |# Markdown test
            |
            |This is a very long string.
            |
            |It contains newlines.
            |
            |It is Markdown.
            |
            |It also contains
            |
            |    arbitrary code
            |    Should be indented
            |    Laika does not (yet) support
            |    github flavoured markdown
            |
            |
            |
            |And some more `stuff` like that. Such as:
            |
            |* This
            |* Stuff
            |* ReST is better
            |
            |Paragraph1
            |
            |Paragraph2.
          """.stripMargin('|')
        )
      }
      val manual: DocPage = {
        new DocPage(docsDir + "manual.md",
          """# Manual
            |
            |Some information
            |
            |# Usage
            |
            |Should be autogenerated
            |
            |# Example
            |Should be autogenerated.
            |""".stripMargin
        )
      }
      val docPages: List[DocPage]= List(readme, manual)
      def generateConfig: Unit = {
        val printWriter = new PrintWriter(new File(docsDir + "directory.conf"))
        def navigationOrder: String = {
          val orderList = new ListBuffer[String]
          for (docPage <-docPages) {
            orderList.append(docPage.showFilename)
          }
          orderList mkString("\n")
        }

        val config: String = {
          "title = \"" + title + "\"\n" +
            "navigationOrder = [\n" +
            navigationOrder +
            "\n]"
        }
        printWriter.write(config)
        printWriter.close()
      }
      def generateTemplateHTML: Unit = {
        val printWriter = new PrintWriter(new File(docsDir + "default.template.html"))

        def template: String =
          """
            |<!DOCTYPE html>
            |<html lang="en">
            |  <head>
            |    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
            |    <meta charset="utf-8">
            |
            |    <title>Test</title>
            |
            |  </head>
            |
            |  <body data-spy="scroll" data-target=".toc" data-offset="200">
            |
            |
            |  <div class="container">
            |
            |    <!-- Docs nav
            |    ================================================== -->
            |    <div class="row">
            |      <div class="span4 toc" >
            |
            |        <ul class="nav nav-list affix">
            |
            |          @:toc.
            |        </ul>
            |
            |      </div>
            |
            |      <div class="span8" id="top">
            |
            |        {{document.content}}
            |
            |      </div>
            |    </div>
            |
            |  </div>
            |
            |</body></html>
          """.stripMargin

        printWriter.write(template)
        printWriter.close()
      }

      val navigationOrder: String = docPages.toString()
      for (docPage <- docPages){
        docPage.generateTextFile()
      }
      generateConfig
      generateTemplateHTML
    }


  }
}
